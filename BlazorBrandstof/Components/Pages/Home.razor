@page "/Home"
@using BlazorBrandstof.Models
@using BlazorBrandstof.Models.Addons
@using BlazorBrandstof.Repositories
@using BlazorBrandstof.Repositories.Addons

<PageTitle>Home</PageTitle>

@if (CurrentOrder != null)
{
<p>Served by: @CurrentOrder.WaiterName | Table @CurrentOrder.TableId | Round @CurrentOrder.Rounds.Count | @CurrentOrder.Timestamp.ToShortTimeString()</p>
}

<button class="btn btn-primary" @onclick="() => TableDialog.Open()">Show Tables</button>
<button class="btn btn-primary" disabled="@(CurrentOrder == null)" @onclick="() => CheckoutDialog.Open()">Checkout</button>
<br>

<ModalDialog @ref="@TableDialog" Title="Tables" CanClose="false">
    <div class="row gap-2">
        @foreach (var table in TableRepo.GetAll())
        {
            <div class="d-grid col-3 mx-auto">
                <button type="button" class="btn btn-primary btn-lg position-relative" @onclick="() => SelectOrCreateOrder(table)">
                    @table.Name
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                    @(OrderRepo.GetByTableId(table.TableId)?.Rounds.Count ?? 0)
                    <span class="visually-hidden">table amount</span>
                  </span>
                </button>
            </div>
        }
    </div>
</ModalDialog>

<ModalDialog @ref="@AddonDialog" Title="Addons" CanClose="true">
    <div class="container">
        <div class="row">
            <div class="col">
                @foreach (var addonCategory in AddonCategoryRepo.GetAll())
                {
                    <h3>@addonCategory.Name</h3>
                    <div class="btn-group" role="group" aria-label="Basic example">
                        @foreach (var addon in AddonRepo.GetByCategoryId(addonCategory.AddonCategoryId)!)
                        {
                            <button type="button" class="btn btn-primary" @onclick="() => SelectAddon(addonCategory, addon)">@addon.Name</button>
                        }
                    </div>
                }
            </div>
            <div class="col">
                @foreach (var pair in _selectedAddons)
                {
                    <p>@pair.Value</p>
                    <br>
                }
                <button class="btn btn-primary" @onclick="() => AddToCurrentRound(CurrentProduct!, _selectedAddons)">Order</button>
            </div>
        </div>
    </div>
</ModalDialog>

<ModalDialog @ref="@CheckoutDialog" Title="Checkout" CanClose="true">
    <div class="container">
        <div class="row">
            <div class="col">
                @if (CurrentOrder != null)
                {
                    @foreach (var product in CurrentOrder.TotalProducts)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" disabled="@(CurrentOrder.PaidProducts.Contains(product))" @onchange="eventArgs => { _selectedCheckoutItemsDictionary[product] = (bool)(eventArgs.Value ?? true); }"/>
                            <label class="form-check-label" for="flexCheckDefault">
                                @product.Name €@product.Price
                            </label>
                        </div>
                    }
                    <br>
                    
                    <button class="btn btn-primary" @onclick="() => { PayForSelectedItems(SelectedCheckoutItems); }">Checkout (€@(SelectedCheckoutItems.Sum(p => p.Price)))</button>
                }
            </div>
        </div>
    </div>
</ModalDialog>

<div class="container-fluid text-center">
    <div class="row">
        @foreach (var category in CategoryRepo.GetAll())
        {
            // maak kolom voor elke categorie

            <div class="col-md-1">
                <h2>@category.Name</h2>
                @foreach (var product in category.Products)
                {
                <div class="row p-1">
                    <button type="button" class="btn btn-primary btn-lg" disabled="@(CurrentOrder == null)" @onclick="() => ShowAddons(product)">@product.Name €@product.Price</button>
                </div>
                }
            </div>
        }
        <div class="col-md-1 text-start">
            <h2>Round</h2>
            @if (CurrentOrder != null)
            {
                <button type="button" class="btn btn-primary" @onclick="() => NextRound()" disabled="@(CurrentRound == null || CurrentRound.Products.Count == 0)">End Round</button>

                for (int i = CurrentOrder.Rounds.Count - 1; i >= 0; i--)
                {
                    var round = CurrentOrder.Rounds[i];

                    <p>
                        <b>Round @(i+1) (€@(round.Products.Sum(p => p.Price)))</b>
                    </p>

                    <ul>
                        @foreach (var product in round.Products)
                        {
                            <li>
                                <p>@product.Name €@product.Price</p>
                                <ul>
                                    @foreach (var addon in product.Addons)
                                    {
                                        <li>
                                            <p>@addon</p>
                                        </li>
                                    }
                                </ul>
                            </li>
                        }
                    </ul>
                }
            }
        </div>
    </div>
</div>

@code {
    private ModalDialog TableDialog { get; set; } = null!;
    private ModalDialog AddonDialog { get; set; } = null!;
    private ModalDialog CheckoutDialog { get; set; } = null!;

    private Models.Round? CurrentRound { get; set; }
    private Models.Order? CurrentOrder { get; set; }

    private Product? CurrentProduct { get; set; }

    private readonly Dictionary<string, string> _selectedAddons = new();
    private readonly Dictionary<Product, bool> _selectedCheckoutItemsDictionary = new();

    private List<Product> SelectedCheckoutItems
    {
        get
        {
            return _selectedCheckoutItemsDictionary.Where(s => s.Value == true).Select(s => s.Key).ToList();
        }
    }

    private void SelectAddon(AddonCategory category, Addon addon)
    {
        if (_selectedAddons.ContainsKey(category.Name))
        {
            _selectedAddons.Remove(category.Name);
        }

        _selectedAddons.Add(category.Name, addon.Name);
    }
    
    private void ShowAddons(Product product)
    {
        CurrentProduct = product;
        AddonDialog.Open();
    }

    private void AddToCurrentRound(Product product, Dictionary<string, string> addons)
    {
        AddonDialog.Close();

        if (CurrentRound == null) return;

        product.Addons = addons.Values.ToList();
        _selectedAddons.Clear();

        CurrentRound.Products.Add(product);
        CurrentProduct = null;
    }

    private void SelectOrCreateOrder(Table table)
    {
        TableDialog.Close();

        Order? order = OrderRepo.GetAll().FirstOrDefault(o => o.TableId == table.TableId && o.Status != "Paid");

        if (order != null)
        {
            CurrentOrder = order;
            CurrentRound = order.Rounds.LastOrDefault();
        }
        else
        {
            CurrentOrder = OrderRepo.Add(new Order()
            {
                Timestamp = DateTime.Now,
                WaiterName = "Waiter1",
                TableId = table.TableId,
                Status = "Busy",
            });
            CurrentRound = null;
        }
        
        if(CurrentRound == null)
            NextRound();
    }

    private void NextRound()
    {
        if (CurrentOrder == null) return;

        if (CurrentRound != null)
            RoundRepo.Update(CurrentRound);

        CurrentRound = RoundRepo.Add(new Models.Round()
        {
            OrderId = CurrentOrder.OrderId,
            Status = "Ready",
        });
        CurrentOrder.Rounds.Add(CurrentRound!);
    }

    private void PayForSelectedItems(List<Product> selectedItems)
    {
        if(CurrentOrder == null) return;

        foreach (var product in selectedItems)
        {
            if(!CurrentOrder.PaidProducts.Contains(product))
                CurrentOrder.PaidProducts.Add(product);
        }

        var productsLeft = CurrentOrder.TotalProducts.Except(CurrentOrder.PaidProducts).Count();

        if (productsLeft == 0)
        {
            CheckoutDialog.Close();

            CurrentOrder.Status = "Paid";
            OrderRepo.Update(CurrentOrder);

            var oldTableId = CurrentOrder.TableId;
            CurrentOrder = null;

            var table = TableRepo.GetById(oldTableId);
            if(table != null)
                SelectOrCreateOrder(table);
        }
    }
}