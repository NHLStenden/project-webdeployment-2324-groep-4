@page "/"
@using BlazorBrandstof.Models
@using BlazorBrandstof.Repositories
@using BlazorBrandstof.Repositories.Addons

<PageTitle>Home</PageTitle>

<button class="btn btn-primary" @onclick="() => TableDialog.Open()" disabled="@(CurrentRound != null)">Show Tables</button><br>

<ModalDialog @ref="@TableDialog" Title="Tables" CanClose="false">
    <div class="row gap-2">
        @foreach (var table in TableRepo.GetAll())
        {
            <div class="d-grid col-3 mx-auto">
                <button type="button" class="btn btn-primary btn-lg" @onclick="() => StartOrder(table)">@table.Name</button>
            </div>
        }
    </div>
</ModalDialog>

<ModalDialog @ref="@AddonDialog" Title="Addons" CanClose="true">
    <form>
    @foreach (var addonCategory in AddonCategoryRepo.GetAll())
    {
        <div>
            <h3>@addonCategory.Name</h3>
            @foreach (var addon in AddonRepo.GetByCategoryId(addonCategory.AddonCategoryId)!)
            {
                <input type="radio" name="@addonCategory.Name" id="@addon.Name" value="@addon.Name">
                <label for="@addon.Name">@addon.Name</label><br>
            }
        </div>
    }
    </form>
</ModalDialog>

<div class="container text-center">
    <div class="row">
        @foreach (var category in CategoryRepo.GetAll())
        {
            // maak kolom voor elke categorie
            
            <div class="col">
                <h2>@category.Name</h2>
                @foreach (var product in category.Products)
                {
                    <div class="col p-1">
                        <button type="button" class="btn btn-primary btn-lg" disabled="@(CurrentOrder == null)" @onclick="() => ShowAddons(product)">@product.Name $@product.Price</button>
                    </div>
                }
            </div>
        }
        <div class="col">
            <h2>Round</h2>
            @if (CurrentOrder != null)
            {
                <button type="button" class="btn btn-primary" @onclick="() => NextRound()" disabled="@(CurrentRound == null || CurrentRound.Products.Count == 0)">End Round</button>
                
                for (int i = CurrentOrder.Rounds.Count - 1; i >= 0; i--)
                {
                    var round = CurrentOrder.Rounds[i];

                    <p><b>Round @(i + 1) -----------</b></p>
                    
                    // Maak een dictionary van productId, Aantal
                    var productIdAmountDictionary = round.Products.GroupBy(item => item.ProductId)
                        .ToDictionary(group => group.Key, group => group.Count());
                    
                    @foreach (var pair in productIdAmountDictionary)
                    {
                        var product = ProductRepo.GetById(pair.Key);
                        
                        <p>@(pair.Value)x @product.Name $@product.Price</p>
                    }
                }
            }
        </div>
    </div>
</div>

@code {
    private ModalDialog TableDialog { get; set; } = null!;
    public ModalDialog AddonDialog { get; set; } = null!;
    
    private Models.Round? CurrentRound { get; set; }
    private Models.Order? CurrentOrder { get; set; }

    private void ShowAddons(Product product)
    {
        AddonDialog.Open();
    }

    private void AddToRound(Product product)
    {
        if(CurrentRound == null) return;
        
        CurrentRound.Products.Add(product);
    }

    private void StartOrder(Table table)
    {
        TableDialog.Close();

        CurrentOrder = OrderRepo.Add(new Order()
        {
            Timestamp = DateTime.Now,
            WaiterName = "Waiter1",
            TableId = table.TableId,
        });

        NextRound();
    }

    private void NextRound()
    {
        if (CurrentOrder == null) return;

        if (CurrentRound != null)
            RoundRepo.Update(CurrentRound);

        CurrentRound = RoundRepo.Add(new Models.Round()
        {
            OrderId = CurrentOrder.OrderId,
            Status = "Ready",
        });
        CurrentOrder.Rounds.Add(CurrentRound!);
    }

}